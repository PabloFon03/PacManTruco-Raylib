#include "Maze.h"

using namespace PacMan_Board;

Board::Board(Resources* _res, int _difficulty)
{

	resources = _res;

	difficulty = _difficulty;

	player = Player{ this, &grid };

	RefillMazeQueue(false);
	SpawnNextMaze();

}

void Board::Update()
{

	switch (currentState)
	{

	case Starting:

		stepTimer += GetDeltaTime();

		float targetTimer;
		targetTimer = stepCounter == 0 ? 3 : 1;

		if (stepTimer >= targetTimer)
		{

			stepCounter++;

			stepTimer -= targetTimer;

		}

		if (stepCounter == 6) { currentState = Playing; }

		break;

	case Playing:

		player.Update();

		for (int i = 0; i < enemies.size(); i++) { enemies[i].Update(); }

		break;

	}

}

void Board::OnDraw()
{

	switch (currentState)
	{

	case Starting:

		grid.OnDraw(clearedRounds % 6);

		player.OnDraw();

		switch (stepCounter)
		{

		case 0:

			DrawBox(8, Vector2{ 96, 32 }, Vector2{ 152, 224 }, SKYBLUE);

			DrawTextCharAtlas("READY", Vector2{ 152, 220 }, SKYBLUE, 1);

			break;

		case 2:

			DrawBox(8, Vector2{ 32, 32 }, Vector2{ 152, 224 }, RED);

			DrawTextCharAtlas("3", Vector2{ 152, 220 }, RED, 1);

			break;

		case 3:

			DrawBox(8, Vector2{ 32, 32 }, Vector2{ 152, 224 }, YELLOW);

			DrawTextCharAtlas("2", Vector2{ 152, 220 }, YELLOW, 1);

			break;

		case 4:

			DrawBox(8, Vector2{ 32, 32 }, Vector2{ 152, 224 }, GREEN);

			DrawTextCharAtlas("1", Vector2{ 152, 220 }, GREEN, 1);

			break;

		case 5:

			DrawBox(8, Vector2{ 64, 32 }, Vector2{ 152, 224 }, SKYBLUE);

			DrawTextCharAtlas("GO", Vector2{ 152, 220 }, SKYBLUE, 1);

			break;

		}

		break;

	case Playing:

		grid.OnDraw(clearedRounds % 6);

		// Draw Entities From Top To Bottom
		std::vector<Entity*> entities = std::vector<Entity*>();

		entities.push_back(&player);
		for (int i = 0; i < enemies.size(); i++) { entities.push_back(&enemies[i]); }

		// Selection Sort
		for (int i = 0; i < entities.size() - 1; i++)
		{

			int targetIndex = i;

			for (int i = targetIndex + 1; i < entities.size(); i++) { if ((*entities[i]).GetRawCoords().y < (*entities[targetIndex]).GetRawCoords().y) { targetIndex = i; } }

			if (targetIndex != i) { std::swap(entities[i], entities[targetIndex]); }

		}

		for (int i = 0; i < entities.size(); i++) { (*entities[i]).OnDraw(); }

		break;

	}

	// Top UI
	DrawRectangle(0, 0, 304, 48, BLACK);

	DrawText(("Score: " + std::to_string(score)).c_str(), 8, 8, 16, WHITE);
	DrawText(("Speed: " + std::to_string(speedMod + 1)).c_str(), 128, 8, 16, WHITE);

	// Bottom UI
	DrawRectangle(0, 400, 304, 48, BLACK);

	DrawTextureRec(GetTexture(2), Rectangle{ (float)(clearedRounds % 6) * 32, 0, 32, 32 }, Vector2{ 136, 408 }, WHITE);
	DrawText(("Dots: " + std::to_string(dotsCollected) + " / " + std::to_string(dotGoal)).c_str(), 192, 416, 16, WHITE);

}

void Board::ClearTile(int _i) { grid.ClearTile(_i); }

void Board::AddScore(int _s)
{

	score += _s;

	speedScore += _s;

	while (speedScore >= 500)
	{

		speedScore -= 500;

		if (speedMod < 24) { speedMod++; }

		else { score += 2500; }

	}

}

void Board::DotCollected()
{

	dotsCollected++;

	if (dotsCollected == dotGoal)
	{

		clearedRounds++;

		SpawnNextMaze();

	}

}

void Board::OnPowerCollected()
{
}

void Board::OnPlayerHit()
{

	// currentState = Defeat;
	switch (player.ReturnEnemyCollisionOutcome())
	{
	default:
		break;
	}

}

void Board::RefillMazeQueue(bool _random)
{

	std::vector<int> mazeVec = std::vector<int>(0);

	int ranges[3]{ 15, 10, 5 };

	int startPoint = 0;

	for (int i = 0; i < difficulty; i++) { startPoint += ranges[i]; }

	for (int i = startPoint; i < ranges[difficulty]; i++) { mazeVec.push_back(i); }

	if (_random)
	{

		Random r = Random();

		std::vector<int> shuffledVec = std::vector<int>(0);

		while (mazeVec.size() > 0)
		{

			int n = r.RandomInt(mazeVec.size());

			shuffledVec.push_back(mazeVec[n]);
			mazeVec.erase(std::next(mazeVec.begin(), n));

		}

		mazeIDs = shuffledVec;

	}

	else { mazeIDs = mazeVec; }

}

Board::MazeSpawnData Board::ReturnMazeSpawnData(int _i)
{

	MazeSpawnData returnData;

	switch (_i)
	{

	case 0:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 0, 0, 0, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 12 }, 3 };

		break;

	case 1:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 4, 11, 11, 11, 11, 11, 11, 11, 10, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 0, 0, 0, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 3, 11, 12, 11, 9, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 6, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 7, 11, 10, 17, 6, 17, 4, 11, 13, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 17, 5, 17, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 7, 11, 11, 11, 13, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 9 }, 1 };

		break;

	case 2:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 4, 11, 11, 11, 11, 11, 11, 11, 10, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 0, 0, 0, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 7, 11, 11, 11, 11, 11, 11, 11, 13, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 15 }, 3 };

		break;

	case 3:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 4, 11, 11, 11, 13, 0, 7, 11, 11, 11, 10, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 0, 0, 0, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 0, 0, 0, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 7, 11, 11, 11, 10, 0, 4, 11, 11, 11, 13, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 12 }, 3 };

		break;

	case 4:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 6, 17, 7, 13, 17, 7, 13, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 7, 11, 11, 10, 17, 4, 11, 11, 13, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 4, 11, 11, 11, 13, 0, 7, 11, 11, 11, 10, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 0, 0, 0, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 4, 11, 11, 11, 11, 11, 10, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 7, 11, 11, 11, 11, 11, 13, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 0, 0, 0, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 7, 11, 11, 11, 10, 0, 4, 11, 11, 11, 13, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 4, 11, 11, 13, 17, 7, 11, 11, 10, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 6, 17, 4, 10, 17, 4, 10, 17, 6, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 12 }, 3 };

		break;

	case 5:

		returnData.gridTiles = std::vector<int>
		{
			4, 11, 11, 11, 11, 11, 11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 4, 11, 11, 10, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 6, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 6, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 0, 7, 11, 11, 13, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 0, 0, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			7, 11, 11, 11, 11, 11, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 1, 6 }, 0 };

		break;

	case 6:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 11, 11, 11, 11, 11, 11, 10,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 4, 11, 11, 10, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 6, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 6, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 7, 11, 11, 13, 0, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 0, 0, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 11, 11, 11, 11, 11, 13,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 17, 6 }, 0 };

		break;

	case 7:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			4, 11, 11, 11, 11, 11, 11, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 0, 0, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 0, 4, 11, 11, 10, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 6, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 6, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 7, 11, 11, 13, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			6, 17, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			7, 11, 11, 11, 11, 11, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 1, 15 }, 2 };

		break;

	case 8:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 11, 11, 11, 11, 11, 11, 10,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 0, 0, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 4, 11, 11, 10, 0, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 6, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 6, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 7, 11, 11, 13, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 17, 6,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 11, 11, 11, 11, 11, 13
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 17, 15 }, 2 };

		break;

	case 9:

		returnData.gridTiles = std::vector<int>
		{
			4, 11, 11, 11, 11, 11, 11, 10, 0, 2, 0, 4, 11, 11, 11, 11, 11, 11, 10,
			6, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 6,
			6, 0, 4, 11, 11, 10, 0, 6, 0, 6, 0, 6, 0, 4, 11, 11, 10, 0, 6,
			6, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0, 6,
			6, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0, 6,
			6, 0, 7, 11, 11, 13, 0, 5, 0, 5, 0, 5, 0, 7, 11, 11, 13, 0, 6,
			6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
			7, 11, 11, 11, 9, 0, 4, 11, 11, 11, 11, 11, 10, 0, 3, 11, 11, 11, 13,
			0, 0, 0, 0, 0, 0, 6, 17, 17, 18, 17, 17, 6, 0, 0, 0, 0, 0, 0,
			4, 11, 11, 11, 10, 0, 6, 17, 4, 11, 10, 17, 6, 0, 4, 11, 11, 11, 10,
			6, 0, 0, 0, 6, 0, 6, 17, 6, 0, 6, 17, 6, 0, 6, 0, 0, 0, 6,
			6, 0, 0, 0, 6, 0, 6, 17, 6, 0, 6, 17, 6, 0, 6, 0, 0, 0, 6,
			7, 11, 11, 11, 13, 0, 6, 17, 7, 11, 13, 17, 6, 0, 7, 11, 11, 11, 13,
			0, 0, 0, 0, 0, 0, 6, 17, 0, 0, 0, 17, 6, 0, 0, 0, 0, 0, 0,
			4, 11, 11, 11, 9, 0, 7, 11, 11, 11, 11, 11, 13, 0, 3, 11, 11, 11, 10,
			6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
			6, 0, 4, 11, 11, 10, 0, 2, 0, 2, 0, 2, 0, 4, 11, 11, 10, 0, 6,
			6, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0, 6,
			6, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0, 6,
			6, 0, 7, 11, 11, 13, 0, 6, 0, 6, 0, 6, 0, 7, 11, 11, 13, 0, 6,
			6, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 6,
			7, 11, 11, 11, 11, 11, 11, 13, 0, 5, 0, 7, 11, 11, 11, 11, 11, 11, 13
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 13 }, 1 };

		break;

	case 10:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 4, 11, 11, 13, 17, 6, 17, 7, 11, 11, 10, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 17, 6, 17, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 3, 11, 11, 16, 11, 11, 9, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 17, 6, 17, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 7, 11, 11, 10, 17, 5, 17, 4, 11, 11, 13, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 7, 11, 11, 11, 13, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 4, 11, 11, 11, 10, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 4, 11, 11, 13, 17, 2, 17, 7, 11, 11, 10, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 17, 6, 17, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 3, 11, 11, 16, 11, 11, 9, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 6, 17, 17, 17, 17, 6, 17, 17, 17, 17, 6, 0, 0, 0, 0,
			0, 0, 0, 0, 7, 11, 11, 10, 17, 6, 17, 4, 11, 11, 13, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 15 }, 3 };

		break;

	case 11:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 7, 11, 13, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 7, 11, 10, 0, 4, 11, 13, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 18, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 4, 11, 13, 0, 7, 11, 10, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 4, 11, 10, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 7, 11, 13, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 0, 0, 0, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 7, 11, 10, 0, 4, 11, 13, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 18, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 4, 11, 13, 0, 7, 11, 10, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 17, 17, 17, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 4, 11, 10, 17, 6, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 13 }, 3 };

		break;

	case 12:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 0, 0,
			0, 0, 6, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, 6, 0, 0,
			0, 0, 6, 17, 4, 11, 11, 11, 9, 21, 3, 11, 11, 11, 10, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 20, 17, 17, 17, 17, 17, 17, 17, 21, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 4, 11, 9, 21, 3, 11, 10, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 20, 17, 17, 17, 21, 6, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 17, 2, 18, 2, 17, 6, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 17, 6, 17, 6, 17, 6, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 17, 6, 17, 5, 17, 6, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 17, 6, 17, 17, 17, 6, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 17, 5, 19, 3, 11, 13, 17, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 6, 19, 17, 17, 17, 17, 17, 22, 6, 17, 6, 0, 0,
			0, 0, 6, 17, 6, 17, 7, 11, 9, 19, 3, 11, 11, 11, 13, 17, 6, 0, 0,
			0, 0, 6, 19, 6, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 6, 0, 0,
			0, 0, 6, 0, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 0, 0,
			0, 0, 7, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 3, 17 }, 2 };

		break;

	case 13:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 4, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 10, 0, 0, 0,
			0, 0, 0, 6, 0, 0, 0, 6, 17, 17, 17, 6, 17, 17, 17, 6, 0, 0, 0,
			0, 0, 0, 8, 11, 12, 11, 13, 17, 2, 17, 8, 11, 9, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 0, 6, 17, 17, 17, 6, 21, 6, 17, 17, 17, 6, 0, 0, 0,
			0, 0, 0, 8, 11, 13, 17, 4, 11, 14, 17, 6, 17, 3, 11, 14, 0, 0, 0,
			0, 0, 0, 6, 17, 17, 17, 6, 0, 6, 17, 6, 17, 17, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 17, 3, 11, 14, 0, 6, 17, 7, 11, 10, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 17, 17, 17, 6, 0, 6, 17, 17, 17, 6, 17, 6, 0, 0, 0,
			0, 0, 0, 8, 11, 10, 17, 8, 11, 15, 11, 9, 17, 6, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 0, 6, 17, 6, 17, 17, 17, 17, 17, 6, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 0, 6, 19, 6, 17, 3, 11, 11, 11, 13, 17, 6, 0, 0, 0,
			0, 0, 0, 6, 0, 6, 0, 6, 17, 17, 20, 17, 17, 17, 17, 6, 0, 0, 0,
			0, 0, 0, 7, 11, 15, 11, 15, 11, 11, 11, 11, 11, 11, 11, 13, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 6, 15 }, 2 };

		break;

	case 14:

		returnData.gridTiles = std::vector<int>
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			0, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 0,
			9, 17, 3, 11, 11, 9, 17, 4, 9, 0, 3, 10, 17, 3, 11, 11, 9, 17, 3,
			0, 17, 17, 17, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 17, 17, 17, 0,
			10, 17, 4, 12, 12, 10, 17, 6, 17, 2, 17, 6, 17, 4, 12, 12, 10, 17, 4,
			13, 17, 7, 15, 15, 13, 17, 6, 17, 5, 17, 6, 17, 7, 15, 15, 13, 17, 7,
			0, 17, 17, 17, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 17, 17, 17, 0,
			9, 17, 3, 11, 11, 9, 17, 7, 9, 0, 3, 13, 17, 3, 11, 11, 9, 17, 3,
			0, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 0,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 14 }, 1 };

		break;

	default:

		returnData.gridTiles = std::vector<int>
		{
			7, 11, 11, 11, 11, 11, 11, 11, 11, 15, 11, 11, 11, 11, 11, 11, 11, 11, 13,
			6, 17, 17, 17, 17, 17, 17, 17, 17, 6, 17, 17, 17, 17, 17, 17, 17, 17, 6,
			6, 18, 7, 13, 17, 7, 11, 13, 17, 6, 17, 7, 11, 13, 17, 7, 13, 18, 6,
			6, 17, 4, 10, 17, 4, 11, 10, 17, 5, 17, 4, 11, 10, 17, 4, 10, 17, 6,
			6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 6,
			6, 17, 9, 3, 17, 2, 17, 9, 11, 15, 11, 3, 17, 2, 17, 9, 3, 17, 6,
			6, 17, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 17, 6,
			4, 11, 11, 13, 17, 8, 11, 3, 0, 5, 0, 9, 11, 14, 17, 7, 11, 11, 10,
			0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0,
			11, 11, 11, 10, 17, 5, 0, 7, 3, 0, 9, 13, 0, 5, 17, 4, 11, 11, 11,
			0, 0, 0, 0, 17, 0, 0, 6, 0, 0, 0, 6, 0, 0, 17, 0, 0, 0, 0,
			11, 11, 11, 13, 17, 2, 0, 4, 11, 11, 11, 10, 0, 2, 17, 7, 11, 11, 11,
			0, 0, 0, 6, 17, 6, 0, 0, 0, 0, 0, 0, 0, 6, 17, 6, 0, 0, 0,
			7, 11, 11, 10, 17, 5, 0, 9, 11, 15, 11, 3, 0, 5, 17, 4, 11, 11, 13,
			6, 17, 17, 17, 17, 17, 17, 17, 17, 6, 17, 17, 17, 17, 17, 17, 17, 17, 6,
			6, 17, 9, 13, 17, 9, 11, 3, 17, 5, 17, 9, 11, 3, 17, 7, 3, 17, 6,
			6, 18, 17, 6, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 6, 17, 18, 6,
			8, 3, 17, 5, 17, 2, 17, 9, 11, 15, 11, 3, 17, 2, 17, 5, 17, 9, 14,
			6, 17, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 6, 17, 17, 17, 17, 6,
			6, 17, 9, 11, 11, 12, 11, 3, 17, 5, 17, 9, 11, 12, 11, 11, 3, 17, 6,
			6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 6,
			4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10
		};

		returnData.playerSpawn = PlayerSpawnData{ Entity::Vector2Int{ 9, 16 }, 3 };
		/*
		returnData.enemySpawns = std::vector<EnemySpawnData>
		{
			EnemySpawnData{ 0, Entity::Vector2Int{ 9, 8 }, 3 },
			EnemySpawnData{ 1, Entity::Vector2Int{ 8, 10 }, 0 },
			EnemySpawnData{ 2, Entity::Vector2Int{ 9, 10 }, 0 },
			EnemySpawnData{ 3, Entity::Vector2Int{ 10, 10 }, 0 }
		};
		*/
		break;

	}

	return returnData;

}

void Board::SpawnNextMaze()
{

	if (mazeIDs.size() == 0) { RefillMazeQueue(); }

	MazeSpawnData nextMaze = ReturnMazeSpawnData(mazeIDs[0]);

	grid = Grid(this, nextMaze.gridTiles);
	dotsCollected = 0;
	dotGoal = grid.GetDotCount();

	player.SetSpawn(nextMaze.playerSpawn.spawnPos, nextMaze.playerSpawn.spawnDir);

	enemies.clear();
	for (int i = 0; i < nextMaze.enemySpawns.size(); i++) { SpawnEnemy(nextMaze.enemySpawns[i]); }

	mazeIDs.erase(mazeIDs.begin());

}